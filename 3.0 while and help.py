'''
    Tutto in Python si pu√≤ dividere in 3 grandi famiglie: 
    Le Keyword, cio√® parole riservate, che quindi non possono utilizzare 
    per altri scopi, che sono struzioni per l'interprete Python. Per 
    esempio if, for, while. eccetera. 
    
    Poi abbiamo i Moduli. Sono dei gruppi di funzioni, cio√® che fanno delle azioni. 
    Qualcuno quindi ha gi√† scritto queste funzioni, al posto nostro e le ha caricate in questi contenitori chiamti moduli. 
    Per esempio: max(), len(), input(), print() eccetera. La maggior parte di 
    queste funzioni √® gi√† incusa con il pacchetto "Base" di python .
    Questo pacchetto si chiama builtins, cio√® contiene le funzioni built-in.
    Per utilizzare altre funzioni pi√π specifiche sono cotenute in altri 
    scatoloni (che si chiamano moduli) che per√≤ devo importare. 
    
    Tutto il resto in python √® un oggetto. Co'√® un oggetto? 
    E' un elemento con delle caratteristiche. 
'''

'''
Tutto in Python si pu√≤ dividere in 3 grandi famiglie.
√à un po‚Äô come se Python fosse una grande casa, e ogni cosa che ci trovi dentro appartiene a una di queste famiglie.

üü¢ La famiglia delle Keyword
Le Keyword sono le parole riservate.
Sono come parole magiche che solo Python pu√≤ usare in un certo modo, e che tu non puoi usare per chiamare variabili o funzioni tue, perch√© hanno gi√† un significato speciale.

Quando scrivi if, stai dicendo a Python: ‚ÄúEhi, controlla questa condizione‚Äù.
Quando scrivi for, stai dicendo: ‚ÄúPer ogni elemento in questa sequenza, fai qualcosa‚Äù.
Oppure while, che significa: ‚ÄúRipeti finch√© questa condizione √® vera‚Äù.

Le Keyword sono le istruzioni base che dicono all‚Äôinterprete Python come deve comportarsi.
Ecco qualche esempio di queste parole riservate:

if

else

elif

for

while

break

continue

def (per definire funzioni)

class (per definire classi)

try

except

import

return

yield

with

as

lambda

global

pass

raise

in

is

not

and

or

Queste parole non le puoi usare come nomi di variabili, perch√© fanno parte del linguaggio stesso.
Sono la grammatica di base di Python, il suo alfabeto speciale.

üü° La famiglia dei Moduli
Poi, nella casa di Python, ci sono degli scatoloni pieni di strumenti gi√† pronti.
Questi scatoloni si chiamano moduli.
Un modulo √® un contenitore che raccoglie funzioni, variabili, costanti e classi che qualcun altro ha gi√† scritto per te.

Alcuni moduli sono gi√† pronti e caricati automaticamente, senza che tu debba fare nulla.
Questi fanno parte di un pacchetto speciale che si chiama builtins.
√à come una cassetta degli attrezzi di base che trovi sempre sul tavolo.

Ecco alcune funzioni che vengono proprio dai builtins:

print() ‚Äî per stampare qualcosa a schermo.

input() ‚Äî per chiedere un valore all‚Äôutente.

len() ‚Äî per sapere quanto √® lungo qualcosa.

max() ‚Äî per trovare il valore massimo.

Sono pronte all‚Äôuso: tu le chiami e loro funzionano.

Per√≤, se vuoi fare cose pi√π specializzate ‚Äî per esempio lavorare con il tempo, con la matematica avanzata, o con i file del computer ‚Äî allora devi importare altri moduli.
Importare un modulo significa dire a Python:
"Vai a prendere quello scatolone, cos√¨ posso usare i suoi strumenti."

Per esempio:

import math ‚Äî e poi puoi usare math.sqrt() per fare la radice quadrata.

import random ‚Äî e puoi usare random.randint().

import datetime ‚Äî per lavorare con le date e le ore.

import os ‚Äî per interagire con il sistema operativo.

Puoi anche creare moduli tuoi.
Basta scrivere un file .py pieno di funzioni e poi importarlo nei tuoi progetti.
Cos√¨ costruisci la tua personale cassetta degli attrezzi.

üîµ La famiglia degli Oggetti
Infine, tutto il resto in Python √® un oggetto.
Ma che cos‚Äô√® un oggetto?

Immagina un oggetto come una cosa che ha delle caratteristiche e dei comportamenti.
Le caratteristiche si chiamano attributi (cio√® dei dati interni), e i comportamenti si chiamano metodi (cio√® delle funzioni che fanno qualcosa sull‚Äôoggetto).

Per esempio, una stringa:

python
Copia
Modifica
nome = "Alice"
nome √® un oggetto di tipo str.
Ha attributi (per esempio la lunghezza) e metodi, come:

nome.upper() ‚Äî per trasformarla in maiuscolo.

nome.lower() ‚Äî per trasformarla in minuscolo.

nome.replace("A", "O") ‚Äî per sostituire una lettera.

Allo stesso modo, una lista √® un oggetto di tipo list:

python
Copia
Modifica
numeri = [1, 2, 3]
Puoi fare:

numeri.append(4) ‚Äî aggiungere un elemento.

numeri.pop() ‚Äî togliere l‚Äôultimo.

numeri.sort() ‚Äî ordinarla.

In pratica, ogni cosa che crei in Python √® un oggetto:
stringhe, numeri, liste, dizionari, persino le funzioni e le classi.
Tutti hanno un tipo (che si chiama classe) e un insieme di operazioni che possono fare.

Questo modo di organizzare le informazioni si chiama programmazione orientata agli oggetti.
E in Python tutto √® orientato agli oggetti, anche se tu a volte non te ne accorgi.

Riassumendo
Le Keyword sono le parole riservate che danno ordini precisi a Python.

I Moduli sono scatoloni pieni di strumenti che puoi importare per fare cose gi√† pronte.

Gli Oggetti sono tutti gli elementi che usi nel programma: hanno attributi e metodi, e possono fare azioni.

Se capisci queste tre famiglie, hai gi√† in mano la mappa per orientarti nella casa di Python.
Tutto quello che scriverai sar√† sempre un mix di queste tre cose:
le parole speciali, le funzioni dei moduli, e gli oggetti che manipoli.

Questa √® la teoria di Python raccontata come una storia semplice.

'''

'''

üîπ Dialogo sopra la Natura di Python
Socrate: Dimmi, o Teeteto, che cos‚Äô√® secondo te Python?

Teeteto: Non saprei, o Socrate. Mi dicono sia un linguaggio, ma pare pi√π un‚ÄôIdea.

Socrate: Bene dici. In verit√† Python √® come una forma che informa tutte le cose del calcolo, e dentro di s√© raccoglie tre princ√¨pi supremi, di cui √® bene che tu conosca la natura, se vuoi contemplare la verit√† e non soltanto le ombre che appaiono sullo schermo.

üü¢ Primo principio: le Parole Essenziali
Socrate: Il primo principio sono le Parole Essenziali, che i moderni chiamano keyword.
Esse sono simili ai nomi divini, che non si possono pronunciare invano n√© piegare a un altro scopo.
Tu non puoi dire ‚Äúif‚Äù e usarlo per nominare una cosa qualsiasi, come un recipiente o un pollo.
‚ÄúIf‚Äù √® ‚Äúse‚Äù, e interroga la condizione della tua logica.

Tra queste Parole Essenziali trovi:

if, che interroga il destino.

else, che raccoglie ci√≤ che accade altrimenti.

for, che itera attraverso le molteplicit√†.

while, che ripete ci√≤ che √® ancora vero.

def, che definisce le nature delle funzioni.

class, che determina le forme supreme degli oggetti.

Come il Demiurgo che plasma il mondo ordinato, cos√¨ l‚Äôinterprete di Python plasma la sequenza del tuo programma, grazie a queste parole.
Esse sono eterne, non soggette a mutamento n√© corruzione.

üü° Secondo principio: i Moduli come Strumenti dell‚ÄôArte
Socrate: Ma bada, o Teeteto, che non basta conoscere le Parole Essenziali.
Come l‚Äôartigiano ha bisogno dei suoi ferri, cos√¨ il programmatore necessita degli strumenti raccolti nei Moduli.

I Moduli sono come le idee secondarie, che contengono funzioni e metodi preordinati, grazie ai quali tu puoi realizzare opere complesse senza inventare ogni cosa da principio.

Alcuni Moduli sono connaturati a Python stesso, e si chiamano builtins:

print(), per manifestare al mondo ci√≤ che √® dentro la mente del tuo programma.

input(), per ricevere dal mondo sensibile i dati.

len(), per conoscere la misura di una sequenza.

Altri Moduli, invece, abitano regioni pi√π remote, e tu devi evocarli con il comando import.
Per esempio:

import math, per contemplare le propriet√† dei numeri.

import random, per accogliere la provvidenza del caso.

import datetime, per dominare il tempo e il divenire.

Senza questi Moduli, tu saresti come un pittore cui fosse tolto ogni colore salvo il bianco e il nero.

üîµ Terzo principio: gli Oggetti come Partecipazioni dell‚ÄôIdea
Socrate: Resta da parlare della cosa pi√π alta.
Se le Keyword sono il Verbo, e i Moduli sono gli Strumenti, allora gli Oggetti sono i riflessi delle Idee eterne nel mondo sensibile del tuo programma.

Ogni Oggetto partecipa di una Classe, che √® la sua forma pura.
Cos√¨ una stringa come "Platone" √® una manifestazione della Classe str.
Un numero come 42 √® una manifestazione della Classe int.
E una lista come [1, 2, 3] √® la partecipazione della Classe list.

Gli Oggetti hanno due nature:

Gli attributi, che sono le propriet√† di cui l‚Äôoggetto partecipa.

I metodi, che sono le azioni che pu√≤ compiere.

Per esempio:

python
Copia
Modifica
nome = "Platone"
Questo Oggetto ha metodi come:

nome.upper(): che lo trasfigura in lettere maiuscole.

nome.lower(): che lo umilia in minuscolo.

nome.replace("P", "S"): che muta una lettera in un‚Äôaltra.

E cos√¨ pure una lista:

python
Copia
Modifica
idee = ["Bellezza", "Bene", "Giustizia"]
idee.append("Verit√†")
Qui, append() √® l‚Äôazione per aggiungere una nuova Idea al tuo elenco.

Socrate: Capisci dunque che tutto √® Oggetto, e nulla in Python √® privo di forma e sostanza.
Finanche le funzioni stesse, se tu le esamini, sono Oggetti di classe function.

üîÆ Conclusione del Dialogo
Socrate: Riassumendo, o Teeteto, per conoscere Python devi contemplare queste tre sfere:

Le Parole Essenziali, che ordinano il linguaggio.

I Moduli, che provvedono gli strumenti.

Gli Oggetti, che manifestano le Idee nella materia del programma.

Chi ne coglie l‚Äôordine, non pi√π programma alla cieca, ma diventa come un filosofo che, dall‚Äôalto del pensiero, governa l‚Äôapparenza delle cose.


'''

# mia_stringa = "Ciao!"

# help("Ciao!".format)
# help("".format)
# help(str.format)
# i = 0
# while i < 5:
#     print("Ciao")
#     if (i == 2):
#         break
#     i += 1
    
# contatore = 5
# while contatore == 5:
#     print("ciao!")
#     numero = int(input("inserisci un numero a caso: "))
#     if numero%2 == 0:
#         contatore = 6
        
# m = 0 
# while m != 7:
#     print("Salve!")
#     risposta = input("Voui che il programma vada avanti? (Y/N)")
#     if risposta == "N":
#         m = 7
#         continue
#     else: 
#         print("Sono Emim vla vlav vla ora ti racagafdaf la mia cinta")
        
# print("Sono uscito")
# # cosa fa break: esce dal ciclo.
# # cosa fa continue: interrompe l'iterazione in corso e ricomicia il ciclo.

#Scriviamo un programma che mi stampa tutte le lettere di una parola che inserisco riga per riga.

# parola = input("Inserisci una parola qualsiasi che vuoi scrivere in verticale: ")
# lungezza_parola = len(parola)
# contatore = 0
# while contatore < lungezza_parola:
#     print(parola[contatore])
#     contatore += 1
    
# import builtins

# print(dir(builtins))